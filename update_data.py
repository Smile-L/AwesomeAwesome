import requests
import time
from collections import defaultdict
from jinja2 import Environment, FileSystemLoader
import os
import subprocess
import csv
import json
from datetime import datetime

# 配置GitHub令牌
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
if not GITHUB_TOKEN:
    # 尝试使用GitHub Actions的默认token
    GITHUB_TOKEN = os.getenv('GITHUB_TOKEN', 'github-token')

headers = {
    'Authorization': f'Bearer {GITHUB_TOKEN}'
}

# GitHub API的基础URL
GITHUB_API_URL = 'https://api.github.com'

# 搜索仓库的URL
SEARCH_REPOS_URL = f"{GITHUB_API_URL}/search/repositories"

# 从环境变量获取搜索参数
query = os.getenv('SEARCH_QUERY')
params = eval(os.getenv('SEARCH_PARAMS', '{"q": "awesome in:name stars:>100", "sort": "stars", "order": "desc", "per_page": 100}'))

print('search parameters:', params)
# 获取多页结果
repositories = []
page = 1
while True:
    params['page'] = page
    response = requests.get(SEARCH_REPOS_URL, headers=headers, params=params)
    data = response.json()
    
    if not data.get('items'):
        break
        
    repos = data.get('items', [])
    if not repos:
        break
        
    print(f"Fetching page {page}, got {len(repos)} repositories")
    
    for repo in repos:
        repo_info = {
            'name': repo['name'],
            'full_name': repo['full_name'],
            'html_url': repo['html_url'],
            'description': (repo['description'] or 'No description').replace('\n', ' ').replace('|', '\\|').replace('\r', ''),
            'stars': repo['stargazers_count'],
            'updated_at': repo['updated_at'].split('T')[0],
            'language': repo['language'] or 'Unknown',
            'topics': repo.get('topics', [])
        }
        repositories.append(repo_info)
    
    # GitHub API有速率限制，添加延时
    time.sleep(2)
    
    if page >= 20:
        break
    
    page += 1

print(f"Total repositories fetched: {len(repositories)}")

# 按star数排序
repositories.sort(key=lambda x: x['stars'], reverse=True)

# 确保data目录存在
os.makedirs('data', exist_ok=True)

# 获取今天的日期作为文件名
today = datetime.now().strftime('%Y-%m-%d')
csv_file = f'data/{today}.csv'

# 写入CSV文件
with open(csv_file, 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    # 写入表头
    writer.writerow(['Repository', 'Language', 'Stars', 'Last Updated', 'Description'])
    # 写入数据
    for repo in repositories:
        writer.writerow([
            repo['full_name'],
            repo['language'],
            repo['stars'],
            repo['updated_at'],
            repo['description']
        ])

print(f"CSV file saved: {csv_file}")

# 生成JavaScript数据文件
js_content = f"""// Auto-generated by update_data.py
const repoData = {json.dumps(repositories, indent=2)};
const lastUpdate = "{today}";
"""

with open('data.js', 'w', encoding='utf-8') as f:
    f.write(js_content)

print("JavaScript data file saved: data.js")

# 自动提交和推送
subprocess.run(['git', 'config', 'user.name', 'github-actions[bot]'])
subprocess.run(['git', 'config', 'user.email', 'github-actions[bot]@users.noreply.github.com'])
subprocess.run(['git', 'add', csv_file, 'data.js'])
subprocess.run(['git', 'commit', '-m', f'Auto update data for {today}'])
subprocess.run(['git', 'push'])
